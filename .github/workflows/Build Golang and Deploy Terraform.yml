name: "Build Golang and Deploy Terraform"

on:
  push:
    branches:
      - main
  pull_request:

permissions:
  id-token: write
  contents: read

jobs:
  build:
    name: "Build Golang"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-go@v3

      - run: go build -o bootstrap main.go

      - uses: actions/upload-artifact@v3
        with:
          path: bootstrap
          retention-days: 1

  terraform:
    name: "Deploy Terraform"
    runs-on: ubuntu-latest
    needs: build
    env:
      tf_actions_working_dir: 'terraform'
      TF_VAR_app_telegram_token: ${{ secrets.APP_TELEGRAM_TOKEN }}
    defaults:
      run:
        working-directory: ${{ env.tf_actions_working_dir }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download Artifact 
        uses: actions/download-artifact@v3
        with:
          name: artifact
          path: terraform

      - name: Zip function to upload to AWS Lambda
        run: zip main.zip bootstrap && rm -rf bootstrap && ls -R

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init 
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false
        continue-on-error: false

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false